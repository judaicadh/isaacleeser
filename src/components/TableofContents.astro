---
import type { MarkdownHeading } from 'astro'


interface Props {
    headings: MarkdownHeading[]
}

const { headings } = Astro.props

const toc = generateToc(headings)
---

<aside class='sticky top-20 order-2 -me-28 hidden basis-60 lg:flex lg:flex-col'>
    <toc-heading>
        <h2 class='font-semibold'>TABLE OF CONTENTS</h2>
        <ul class='text-card-foreground'>
            {toc.map((heading) => <li><a href='...' class='aria-selected:font-medium aria-selected:text-primary'>...</a></li> )}
        </ul>
    </toc-heading>
</aside>

<script>
    class TOC extends HTMLElement {
        headings!: HTMLElement[]
        tocLinks!: HTMLAnchorElement[]
        activeLink!: HTMLAnchorElement | undefined

        constructor() {
            super()

            // initialize the headings and tocLinks
            this.headings = Array.from(
                document.querySelectorAll('article > #content > h2, article > #content > h3')
            )
            this.tocLinks = Array.from(this.querySelectorAll('a[href^="#"]'))
            this.activeLink = undefined
        }

        updateActiveTOCItem = (entries: IntersectionObserverEntry[]) => {
            for (const entry of entries) {
                if (!entry.isIntersecting) continue

                // old link should be inactive
                if (this.activeLink !== undefined) this.activeLink.ariaSelected = 'false'

                // get new link and replace it
                const newActiveLink = this.tocLinks.find(
                    (link) => `#${entry.target.id}` === link.getAttribute('href')
                )
                if (newActiveLink) newActiveLink.ariaSelected = 'true'
                this.activeLink = newActiveLink
            }
        }
        connectedCallback() {
            // set observer
            this.headings.forEach((heading) =>
                new IntersectionObserver(this.updateActiveTOCItem, {
                    root: null,
                    rootMargin: '0% 0% -50% 0%',
                    threshold: [1]
                }).observe(heading)
            )

            // smooth scroll
            const self = this
            this.tocLinks.forEach((anchor) => {
                anchor.addEventListener('click', function (e) {
                    e.preventDefault()
                    const directHeading = self.headings.find(
                        (heading) => `#${heading.id}` === this.getAttribute('href')
                    )
                    directHeading?.scrollIntoView({
                        behavior: 'smooth'
                    })
                })
            })
        }
    }

    customElements.define('toc-heading', TOC)
</script>